3.1 函数的参数传递
参数的传递是通过自动将对象赋值给本地变量名实现的，所有的参数实际上是通过指针进行传递的，作为参数被传递的对象从来不自动拷贝。
函数内部的参数名的赋值不影响调用者，因为是两个不同的作用域。
改变参数的可变对象值会对调用者产生影响。
函数的调用形式：
func(value), func(name=value), func(*sequence), func(**dict)
在函数的调用中，简单的通过变量名位置进行匹配，但是使用name=value的形式告诉python依照变量名进行匹配，这些叫关键字参数。在调用中使用*sequence或者**dict允许我们在一个序列或者字典中相应的封装任意多的位置位置相关或者关键字对象，并且在将他们传递给函数的时候，将他们解包为分开的单个的参数。
函数的定义形式：
def func(value), def func(name=value), def func(*name), def func(**name), def func(*args, name), def func(*, name=value)
在函数的头部，一个简单的变量名是通过位置或者变量名进行匹配的，但是name=value的形式定义了默认的参数值，*name的形式收集了任意的额外不匹配的参数到元组中，并且**name的形式收集了额外的关键字参数到字典中。在python3.0之后的版本，跟在*name或者一个单独的*之后的任何正式的或默认的参数名称，都是keyword-only参数，必须在调用时按照关键字传递。
在函数的调用中，参数必须以此顺序出现：任何位置参数value，后面跟着任何关键字参数name=value和*sequence形式的组合，后面跟着**duct形式。
在函数头部，参数必须以此顺序出现，任何一般参数name，紧跟着任何默认参数name=value，如果有的话，后面是*name的形式，后面紧跟着任何name或name=value 
keyword-only参数，后面跟着**name的形式。
Python内部通过以下步骤在参数赋值前进行参数匹配：
1.通过位置分配非关键字参数。
2.通过匹配变量名分配关键字参数。
3.其他额外的非关键字参数分配到*name列表中。
4.其他额外的关键字参数分配到**name字典中。
5.用默认值分配给在头部未得到分配的参数。
6.如果一个参数分配到一个以上的对象，将会报错退出。
def func(a,b,c): print(a,b,c)
如果调用函数如下def(1,2,b=2)会报错：func() got multiple values for argument 'b'。
def func(*name) 当调用这个函数时，Python将额外位置相关的参数收集到名为name的元祖中，参数对象可以通过对name迭代获取。
def func（**name)当调用这个函数时，Python将而额外关键字参数收集到name字典中，可以通过字典获取。
参数解包








###函数参数类型
位置参数，按传入位置赋值
默认参数必须是不可变类型，默认参数赋值时尽量按变量名赋值，避免位置混乱。
可变参数定义
def calc(*numbers):
    sum = 0
    for n in numbers:
        sum = sum + n * n
    return sum
传入元组/列表类型可变参数
>>> nums = [1, 2, 3] >>> calc(*nums)
关键字参数允许传入任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict
def func(a,b,**kws):
    for key, value in kws:
        print(key, value)
关键字参数传入字典对象
>>> extra = {'city': 'Beijing', 'job': 'Engineer'} >> person('Jack', 24, **extra)
命名关键字参数数定义
def person(name, age, *, city, job):
命名关键字参数必须传入参数名
>>> person('Jack', 24, city='Beijing', job='Engineer')
命名关键字参数可以使用默认值
def person(name, age, *, city = 'beijing', job)
如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了
def person(name, age, *args, city, job):
参数组合
在Python中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这5种参数都可以组合使用。但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。
python函数收到的参数个数不对，或者参数类型不接受，会报出TypeError错误。
###递归函数
使用递归函数需要注意防止栈溢出。在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。
RuntimeError: maximum recursion depth exceeded in comparison
解决递归调用栈溢出的方法是通过尾递归优化,尾递归是指，在函数返回的时候，调用自身本身，并且，return语句不能包含表达式。这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况。
def fact_iter(num, product):
    if num == 1:
        return product
    return fact_iter(num - 1, num * product)
遗憾的是Python解释器也没有做优化，所以，即使把上面的递归函数改成尾递归方式，也会导致栈溢出。
###高阶函数
函数名本身就是变量
高阶函数定义：一个函数接收另一个函数名作为参数。
def add(x, y, f):
    return f(x) + f(y)
map()函数接收两个参数，一个是函数对象，一个是Iterable对象，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。
Iterator对象是惰性序列，可以通过list()函数让它把整个序列都计算出来并返回一个list。
reduce()函数接收两个参数，一个是函数对象，一个是Iterable对象，把一个作用在Iterator上。
filter()函数接收一个函数对象和一个序列对象，filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。
filter()函数返回的是一个Iterator。
sorted()函数也是一个高阶函数，它可以接收一个key函数来实现自定义的排序。
>>> sorted([36, 5, -12, 9, -21], key=abs, reverse=True)
###函数返回函数
高阶函数可以把函数作为结果值返回
def lazy_sum(*args):
    def sum():
        ax = 0
        for n in args:
            ax = ax + n
        return ax
    return sum
当我们调用lazy_sum()时，返回的并不是求和结果，而是求和函数：
>>> f = lazy_sum(1, 3, 5, 7, 9)
>>> f
<function lazy_sum.<locals>.sum at 0x101c6ed90>
调用函数f时，才真正计算求和的结果：
>>> f()
25
这种将相关参数和函数变量都保存在返回的函数中的数据结构称为“闭包”。
###匿名函数
f = lambda x: x * x
###装饰器
在代码运行期间对函数动态增加功能的方式，称之为“装饰器”（Decorator），本质上，decorator就是一个返回函数的高阶函数。
定义装饰器：
def log(func):
    def wrapper(*args, **kw):
        print('call %s():' % func.__name__)
        return func(*args, **kw)
    return wrapper
使用装饰器
@log
def func():
把@log放到now()函数的定义处，相当于执行了语句：now = log(now)
###偏函数
总结functools.partial的作用就是，把一个函数的某些参数设置默认值（仍然可以显式传入），返回一个新的函数，调用这个新函数会更简
int2 = functools.partial(int, base=2)

