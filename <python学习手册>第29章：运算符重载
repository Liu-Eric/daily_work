1. 基础知识
运算符重载仅仅是类方法中拦截内置操作。当出现内置操作时，调用自定义的方法。
所有重载的运算符名称前后都有两个下划线。

2. 索引和分片
__getitem__定义索引操作和分片操作。
分片边界([])绑定一个分片对象，并将分片对象并且传递给索引。
[x,y,z] = slice(x, y, z)
__setitem__通过索引方法赋值

3. 索引迭代
__getitem__方法可以用以实现for循环，in关系测试，内置函数map和列表解析式。

4. 迭代器对象
python中的迭代环境先尝试__iter__方法，在尝试__getitem__方法。
迭代是通过调用内置函数iter去尝试调用__iter__方法来实现的，返回一个迭代器，如果已经提供了迭代器，python就会调用这个迭代对象的next方法，知道引发StopIteration异常。
迭代器就是具有next方法的对象，因此具有__next__方法的类可以充当迭代器。
__iter__只循环一次，循环后迭代器为空，如果类需要多次循环，可以定义一个生成器类，作为内置__iter__函数的返回。

5. 成员关系
__contain__方法优于__iter__和__getitem__方法用以判断从属关系。

6. 属性引用
__getattr__方法拦截属性点好运算，更确切一点，当对未定义的属性或实例运算时调用这个方法，属性名称会作为字符串参数。
有个相关的方法__setattr__会拦截所有的属性赋值操作，如果定义了这个方法，self.attr = value会变成self.__setattr__('attr',value)。这个方法有个问题，因为__setattr__会在此调用__setattr__方法，所以不能直接赋值。需要用self.__dict__[attr] = value的方法赋值。

7. 字符串表达形式
print函数调用__str__,__repr__在所有环境调用，用以返回类的明细信息给开发者。

8. 右侧加法和原处加法
当+右侧是类实例而左侧不是时，会调用__radd__方法。
__iadd__调用原处加法,如果没有调用，则会调用__add__方法。

9. Call表达式
__call__可以让实例类似于函数运行。

10. 比较

11. 布尔测试
在布尔环境中，首先调用__bool__,如果没有定义，则调用__len__。

12. 对象析构函数
__del__
