1. 函数设计概念
耦合性：使函数独立于它外部的环境，对于输入使用参数并且对于输出使用return语句。
耦合性：尽量少使用全局变量。
耦合性：尽量不要改变可变类型参数。
耦合性：避免直接改变另一个模块文件中的变量。
聚合性：每个函数单独完成单一统一的目标。

2. 递归函数
递归函数调用的每一个层级，都会在调用堆栈上有一个递归函数的本地作用域，即不同层级上的递归函数是不同的。
递归可以遍历任意结构形状的数据。

3. 函数对象：属性与注解
内省工具允许探索函数内部细节：__code__。
可以直接把属性附到函数对象上。
def func(a:'spam' = 4,b:(1,10),c:float) -> int
  return a + b + c
注解加默认值的写法
func.__annotations__返回函数注解。
注解不可用于lambda表达式

4. 匿名函数：lambda
lambda表达式创建一个函数，可以将它赋值给一个变量名。
lambda x1,x2,x3=10...:expression。#注意默认参数
lambda与def的区别：
1.lambda是一个表达式，def是一个语句。
2.lambda是一个表达式，def是一个语句块。
3.lambda不能使用判断或者虚幻，可以使用if-else，或者map。
lambda内的代码也遵循函数作用域法则。

5. 在序列中映射函数：map
map可以调用多个序列，一一对应。
list(map(lambda x,y:x+y, [1,2,3], [4,5,6])) >> [5, 7, 9]

6. 函数式编程：filter和reduce
from functools import reduce

